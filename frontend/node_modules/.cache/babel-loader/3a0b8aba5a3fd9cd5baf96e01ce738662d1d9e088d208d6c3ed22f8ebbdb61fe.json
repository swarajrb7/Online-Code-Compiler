{"ast":null,"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/c_cpp_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n  var cFunctions = exports.cFunctions = \"\\\\b(?:hypot(?:f|l)?|s(?:scanf|ystem|nprintf|ca(?:nf|lb(?:n(?:f|l)?|ln(?:f|l)?))|i(?:n(?:h(?:f|l)?|f|l)?|gn(?:al|bit))|tr(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(?:jmp|vbuf|locale|buf)|qrt(?:f|l)?|w(?:scanf|printf)|rand)|n(?:e(?:arbyint(?:f|l)?|xt(?:toward(?:f|l)?|after(?:f|l)?))|an(?:f|l)?)|c(?:s(?:in(?:h(?:f|l)?|f|l)?|qrt(?:f|l)?)|cos(?:h(?:f)?|f|l)?|imag(?:f|l)?|t(?:ime|an(?:h(?:f|l)?|f|l)?)|o(?:s(?:h(?:f|l)?|f|l)?|nj(?:f|l)?|pysign(?:f|l)?)|p(?:ow(?:f|l)?|roj(?:f|l)?)|e(?:il(?:f|l)?|xp(?:f|l)?)|l(?:o(?:ck|g(?:f|l)?)|earerr)|a(?:sin(?:h(?:f|l)?|f|l)?|cos(?:h(?:f|l)?|f|l)?|tan(?:h(?:f|l)?|f|l)?|lloc|rg(?:f|l)?|bs(?:f|l)?)|real(?:f|l)?|brt(?:f|l)?)|t(?:ime|o(?:upper|lower)|an(?:h(?:f|l)?|f|l)?|runc(?:f|l)?|gamma(?:f|l)?|mp(?:nam|file))|i(?:s(?:space|n(?:ormal|an)|cntrl|inf|digit|u(?:nordered|pper)|p(?:unct|rint)|finite|w(?:space|c(?:ntrl|type)|digit|upper|p(?:unct|rint)|lower|al(?:num|pha)|graph|xdigit|blank)|l(?:ower|ess(?:equal|greater)?)|al(?:num|pha)|gr(?:eater(?:equal)?|aph)|xdigit|blank)|logb(?:f|l)?|max(?:div|abs))|di(?:v|fftime)|_Exit|unget(?:c|wc)|p(?:ow(?:f|l)?|ut(?:s|c(?:har)?|wc(?:har)?)|error|rintf)|e(?:rf(?:c(?:f|l)?|f|l)?|x(?:it|p(?:2(?:f|l)?|f|l|m1(?:f|l)?)?))|v(?:s(?:scanf|nprintf|canf|printf|w(?:scanf|printf))|printf|f(?:scanf|printf|w(?:scanf|printf))|w(?:scanf|printf)|a_(?:start|copy|end|arg))|qsort|f(?:s(?:canf|e(?:tpos|ek))|close|tell|open|dim(?:f|l)?|p(?:classify|ut(?:s|c|w(?:s|c))|rintf)|e(?:holdexcept|set(?:e(?:nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(?:aiseexcept|ror)|get(?:e(?:nv|xceptflag)|round))|flush|w(?:scanf|ide|printf|rite)|loor(?:f|l)?|abs(?:f|l)?|get(?:s|c|pos|w(?:s|c))|re(?:open|e|ad|xp(?:f|l)?)|m(?:in(?:f|l)?|od(?:f|l)?|a(?:f|l|x(?:f|l)?)?))|l(?:d(?:iv|exp(?:f|l)?)|o(?:ngjmp|cal(?:time|econv)|g(?:1(?:p(?:f|l)?|0(?:f|l)?)|2(?:f|l)?|f|l|b(?:f|l)?)?)|abs|l(?:div|abs|r(?:int(?:f|l)?|ound(?:f|l)?))|r(?:int(?:f|l)?|ound(?:f|l)?)|gamma(?:f|l)?)|w(?:scanf|c(?:s(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?|mbs)|pbrk|ftime|len|r(?:chr|tombs)|xfrm)|to(?:b|mb)|rtomb)|printf|mem(?:set|c(?:hr|py|mp)|move))|a(?:s(?:sert|ctime|in(?:h(?:f|l)?|f|l)?)|cos(?:h(?:f|l)?|f|l)?|t(?:o(?:i|f|l(?:l)?)|exit|an(?:h(?:f|l)?|2(?:f|l)?|f|l)?)|b(?:s|ort))|g(?:et(?:s|c(?:har)?|env|wc(?:har)?)|mtime)|r(?:int(?:f|l)?|ound(?:f|l)?|e(?:name|alloc|wind|m(?:ove|quo(?:f|l)?|ainder(?:f|l)?))|a(?:nd|ise))|b(?:search|towc)|m(?:odf(?:f|l)?|em(?:set|c(?:hr|py|mp)|move)|ktime|alloc|b(?:s(?:init|towcs|rtowcs)|towc|len|r(?:towc|len))))\\\\b\";\n  var c_cppHighlightRules = function () {\n    var keywordControls = \"break|case|continue|default|do|else|for|goto|if|_Pragma|\" + \"return|switch|while|catch|operator|try|throw|using\";\n    var storageType = \"asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|\" + \"_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void|\" + \"class|wchar_t|template|char16_t|char32_t\";\n    var storageModifiers = \"const|extern|register|restrict|static|volatile|inline|private|\" + \"protected|public|friend|explicit|virtual|export|mutable|typename|\" + \"constexpr|new|delete|alignas|alignof|decltype|noexcept|thread_local\";\n    var keywordOperators = \"and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq\" + \"const_cast|dynamic_cast|reinterpret_cast|static_cast|sizeof|namespace\";\n    var builtinConstants = \"NULL|true|false|TRUE|FALSE|nullptr\";\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n      \"keyword.control\": keywordControls,\n      \"storage.type\": storageType,\n      \"storage.modifier\": storageModifiers,\n      \"keyword.operator\": keywordOperators,\n      \"variable.language\": \"this\",\n      \"constant.language\": builtinConstants\n    }, \"identifier\");\n    var identifierRe = \"[a-zA-Z\\\\$_\\u00a1-\\uffff][a-zA-Z\\\\d\\\\$_\\u00a1-\\uffff]*\\\\b\";\n    var escapeRe = /\\\\(?:['\"?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}U[a-fA-F\\d]{8}|.)/.source;\n    var formatRe = \"%\" + /(\\d+\\$)?/.source // field (argument #)\n    + /[#0\\- +']*/.source // flags\n    + /[,;:_]?/.source // separator character (AltiVec)\n    + /((-?\\d+)|\\*(-?\\d+\\$)?)?/.source // minimum field width\n    + /(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?/.source // precision\n    + /(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?/.source // length modifier\n    + /(\\[[^\"\\]]+\\]|[diouxXDOUeEfFgGaACcSspn%])/.source; // conversion type\n\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"//$\",\n        next: \"start\"\n      }, {\n        token: \"comment\",\n        regex: \"//\",\n        next: \"singleLineComment\"\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // character\n        regex: \"'(?:\" + escapeRe + \"|.)?'\"\n      }, {\n        token: \"string.start\",\n        regex: '\"',\n        stateName: \"qqstring\",\n        next: [{\n          token: \"string\",\n          regex: /\\\\\\s*$/,\n          next: \"qqstring\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: escapeRe\n        }, {\n          token: \"constant.language.escape\",\n          regex: formatRe\n        }, {\n          token: \"string.end\",\n          regex: '\"|$',\n          next: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: 'R\"\\\\(',\n        stateName: \"rawString\",\n        next: [{\n          token: \"string.end\",\n          regex: '\\\\)\"',\n          next: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"keyword\",\n        // pre-compiler directives\n        regex: \"#\\\\s*(?:include|import|pragma|line|define|undef)\\\\b\",\n        next: \"directive\"\n      }, {\n        token: \"keyword\",\n        // special case pre-compiler directive\n        regex: \"#\\\\s*(?:endif|if|ifdef|else|elif|ifndef)\\\\b\"\n      }, {\n        token: \"support.function.C99.c\",\n        regex: cFunctions\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\"\n      }, {\n        token: \"keyword.operator\",\n        regex: /--|\\+\\+|<<=|>>=|>>>=|<>|&&|\\|\\||\\?:|[*%\\/+\\-&\\^|~!<>=]=?/\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"singleLineComment\": [{\n        token: \"comment\",\n        regex: /\\\\$/,\n        next: \"singleLineComment\"\n      }, {\n        token: \"comment\",\n        regex: /$/,\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"directive\": [{\n        token: \"constant.other.multiline\",\n        regex: /\\\\/\n      }, {\n        token: \"constant.other.multiline\",\n        regex: /.*\\\\/\n      }, {\n        token: \"constant.other\",\n        regex: \"\\\\s*<.+?>\",\n        next: \"start\"\n      }, {\n        token: \"constant.other\",\n        // single line\n        regex: '\\\\s*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]',\n        next: \"start\"\n      }, {\n        token: \"constant.other\",\n        // single line\n        regex: \"\\\\s*['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\",\n        next: \"start\"\n      }, {\n        token: \"constant.other\",\n        regex: /[^\\\\\\/]+/,\n        next: \"start\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n  oop.inherits(c_cppHighlightRules, TextHighlightRules);\n  exports.c_cppHighlightRules = c_cppHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n  var MatchingBraceOutdent = function () {};\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n        return range;\n      }\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n        endRow = row;\n      }\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n      var endRow = row;\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/c_cpp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/c_cpp_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/range\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var c_cppHighlightRules = acequire(\"./c_cpp_highlight_rules\").c_cppHighlightRules;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var Range = acequire(\"../range\").Range;\n  var CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\n  var CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n  var Mode = function () {\n    this.HighlightRules = c_cppHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n        if (match) {\n          indent += tab;\n        }\n      } else if (state == \"doc-start\") {\n        if (endState == \"start\") {\n          return \"\";\n        }\n        var match = line.match(/^\\s*(\\/?)\\*/);\n        if (match) {\n          if (match[1]) {\n            indent += \" \";\n          }\n          indent += \"* \";\n        }\n      }\n      return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/c_cpp\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});","map":{"version":3,"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","cFunctions","c_cppHighlightRules","keywordControls","storageType","storageModifiers","keywordOperators","builtinConstants","keywordMapper","$keywords","createKeywordMapper","identifierRe","escapeRe","source","formatRe","stateName","embedRules","normalizeRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","$id"],"sources":["C:/Users/Swaraj/Desktop/Online Code Compiler 3/frontend/node_modules/brace/mode/c_cpp.js"],"sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/c_cpp_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\nvar cFunctions = exports.cFunctions = \"\\\\b(?:hypot(?:f|l)?|s(?:scanf|ystem|nprintf|ca(?:nf|lb(?:n(?:f|l)?|ln(?:f|l)?))|i(?:n(?:h(?:f|l)?|f|l)?|gn(?:al|bit))|tr(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(?:jmp|vbuf|locale|buf)|qrt(?:f|l)?|w(?:scanf|printf)|rand)|n(?:e(?:arbyint(?:f|l)?|xt(?:toward(?:f|l)?|after(?:f|l)?))|an(?:f|l)?)|c(?:s(?:in(?:h(?:f|l)?|f|l)?|qrt(?:f|l)?)|cos(?:h(?:f)?|f|l)?|imag(?:f|l)?|t(?:ime|an(?:h(?:f|l)?|f|l)?)|o(?:s(?:h(?:f|l)?|f|l)?|nj(?:f|l)?|pysign(?:f|l)?)|p(?:ow(?:f|l)?|roj(?:f|l)?)|e(?:il(?:f|l)?|xp(?:f|l)?)|l(?:o(?:ck|g(?:f|l)?)|earerr)|a(?:sin(?:h(?:f|l)?|f|l)?|cos(?:h(?:f|l)?|f|l)?|tan(?:h(?:f|l)?|f|l)?|lloc|rg(?:f|l)?|bs(?:f|l)?)|real(?:f|l)?|brt(?:f|l)?)|t(?:ime|o(?:upper|lower)|an(?:h(?:f|l)?|f|l)?|runc(?:f|l)?|gamma(?:f|l)?|mp(?:nam|file))|i(?:s(?:space|n(?:ormal|an)|cntrl|inf|digit|u(?:nordered|pper)|p(?:unct|rint)|finite|w(?:space|c(?:ntrl|type)|digit|upper|p(?:unct|rint)|lower|al(?:num|pha)|graph|xdigit|blank)|l(?:ower|ess(?:equal|greater)?)|al(?:num|pha)|gr(?:eater(?:equal)?|aph)|xdigit|blank)|logb(?:f|l)?|max(?:div|abs))|di(?:v|fftime)|_Exit|unget(?:c|wc)|p(?:ow(?:f|l)?|ut(?:s|c(?:har)?|wc(?:har)?)|error|rintf)|e(?:rf(?:c(?:f|l)?|f|l)?|x(?:it|p(?:2(?:f|l)?|f|l|m1(?:f|l)?)?))|v(?:s(?:scanf|nprintf|canf|printf|w(?:scanf|printf))|printf|f(?:scanf|printf|w(?:scanf|printf))|w(?:scanf|printf)|a_(?:start|copy|end|arg))|qsort|f(?:s(?:canf|e(?:tpos|ek))|close|tell|open|dim(?:f|l)?|p(?:classify|ut(?:s|c|w(?:s|c))|rintf)|e(?:holdexcept|set(?:e(?:nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(?:aiseexcept|ror)|get(?:e(?:nv|xceptflag)|round))|flush|w(?:scanf|ide|printf|rite)|loor(?:f|l)?|abs(?:f|l)?|get(?:s|c|pos|w(?:s|c))|re(?:open|e|ad|xp(?:f|l)?)|m(?:in(?:f|l)?|od(?:f|l)?|a(?:f|l|x(?:f|l)?)?))|l(?:d(?:iv|exp(?:f|l)?)|o(?:ngjmp|cal(?:time|econv)|g(?:1(?:p(?:f|l)?|0(?:f|l)?)|2(?:f|l)?|f|l|b(?:f|l)?)?)|abs|l(?:div|abs|r(?:int(?:f|l)?|ound(?:f|l)?))|r(?:int(?:f|l)?|ound(?:f|l)?)|gamma(?:f|l)?)|w(?:scanf|c(?:s(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?|mbs)|pbrk|ftime|len|r(?:chr|tombs)|xfrm)|to(?:b|mb)|rtomb)|printf|mem(?:set|c(?:hr|py|mp)|move))|a(?:s(?:sert|ctime|in(?:h(?:f|l)?|f|l)?)|cos(?:h(?:f|l)?|f|l)?|t(?:o(?:i|f|l(?:l)?)|exit|an(?:h(?:f|l)?|2(?:f|l)?|f|l)?)|b(?:s|ort))|g(?:et(?:s|c(?:har)?|env|wc(?:har)?)|mtime)|r(?:int(?:f|l)?|ound(?:f|l)?|e(?:name|alloc|wind|m(?:ove|quo(?:f|l)?|ainder(?:f|l)?))|a(?:nd|ise))|b(?:search|towc)|m(?:odf(?:f|l)?|em(?:set|c(?:hr|py|mp)|move)|ktime|alloc|b(?:s(?:init|towcs|rtowcs)|towc|len|r(?:towc|len))))\\\\b\";\n\nvar c_cppHighlightRules = function() {\n\n    var keywordControls = (\n        \"break|case|continue|default|do|else|for|goto|if|_Pragma|\" +\n        \"return|switch|while|catch|operator|try|throw|using\"\n    );\n    \n    var storageType = (\n        \"asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|\" +\n        \"_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void|\" +\n        \"class|wchar_t|template|char16_t|char32_t\"\n    );\n\n    var storageModifiers = (\n        \"const|extern|register|restrict|static|volatile|inline|private|\" +\n        \"protected|public|friend|explicit|virtual|export|mutable|typename|\" +\n        \"constexpr|new|delete|alignas|alignof|decltype|noexcept|thread_local\"\n    );\n\n    var keywordOperators = (\n        \"and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq\" +\n        \"const_cast|dynamic_cast|reinterpret_cast|static_cast|sizeof|namespace\"\n    );\n\n    var builtinConstants = (\n        \"NULL|true|false|TRUE|FALSE|nullptr\"\n    );\n\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"keyword.control\" : keywordControls,\n        \"storage.type\" : storageType,\n        \"storage.modifier\" : storageModifiers,\n        \"keyword.operator\" : keywordOperators,\n        \"variable.language\": \"this\",\n        \"constant.language\": builtinConstants\n    }, \"identifier\");\n\n    var identifierRe = \"[a-zA-Z\\\\$_\\u00a1-\\uffff][a-zA-Z\\\\d\\\\$_\\u00a1-\\uffff]*\\\\b\";\n    var escapeRe = /\\\\(?:['\"?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}U[a-fA-F\\d]{8}|.)/.source;\n    var formatRe = \"%\"\n          + /(\\d+\\$)?/.source // field (argument #)\n          + /[#0\\- +']*/.source // flags\n          + /[,;:_]?/.source // separator character (AltiVec)\n          + /((-?\\d+)|\\*(-?\\d+\\$)?)?/.source // minimum field width\n          + /(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?/.source // precision\n          + /(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?/.source // length modifier\n          + /(\\[[^\"\\]]+\\]|[diouxXDOUeEfFgGaACcSspn%])/.source; // conversion type\n\n    this.$rules = { \n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"//$\",\n                next : \"start\"\n            }, {\n                token : \"comment\",\n                regex : \"//\",\n                next : \"singleLineComment\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"comment\"\n            }, {\n                token : \"string\", // character\n                regex : \"'(?:\" + escapeRe + \"|.)?'\"\n            }, {\n                token : \"string.start\",\n                regex : '\"', \n                stateName: \"qqstring\",\n                next: [\n                    { token: \"string\", regex: /\\\\\\s*$/, next: \"qqstring\" },\n                    { token: \"constant.language.escape\", regex: escapeRe },\n                    { token: \"constant.language.escape\", regex: formatRe },\n                    { token: \"string.end\", regex: '\"|$', next: \"start\" },\n                    { defaultToken: \"string\"}\n                ]\n            }, {\n                token : \"string.start\",\n                regex : 'R\"\\\\(', \n                stateName: \"rawString\",\n                next: [\n                    { token: \"string.end\", regex: '\\\\)\"', next: \"start\" },\n                    { defaultToken: \"string\"}\n                ]\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n            }, {\n                token : \"keyword\", // pre-compiler directives\n                regex : \"#\\\\s*(?:include|import|pragma|line|define|undef)\\\\b\",\n                next  : \"directive\"\n            }, {\n                token : \"keyword\", // special case pre-compiler directive\n                regex : \"#\\\\s*(?:endif|if|ifdef|else|elif|ifndef)\\\\b\"\n            }, {\n                token : \"support.function.C99.c\",\n                regex : cFunctions\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\"\n            }, {\n                token : \"keyword.operator\",\n                regex : /--|\\+\\+|<<=|>>=|>>>=|<>|&&|\\|\\||\\?:|[*%\\/+\\-&\\^|~!<>=]=?/\n            }, {\n              token : \"punctuation.operator\",\n              regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken : \"comment\"\n            }\n        ],\n        \"singleLineComment\" : [\n            {\n                token : \"comment\",\n                regex : /\\\\$/,\n                next : \"singleLineComment\"\n            }, {\n                token : \"comment\",\n                regex : /$/,\n                next : \"start\"\n            }, {\n                defaultToken: \"comment\"\n            }\n        ],\n        \"directive\" : [\n            {\n                token : \"constant.other.multiline\",\n                regex : /\\\\/\n            },\n            {\n                token : \"constant.other.multiline\",\n                regex : /.*\\\\/\n            },\n            {\n                token : \"constant.other\",\n                regex : \"\\\\s*<.+?>\",\n                next : \"start\"\n            },\n            {\n                token : \"constant.other\", // single line\n                regex : '\\\\s*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]',\n                next : \"start\"\n            }, \n            {\n                token : \"constant.other\", // single line\n                regex : \"\\\\s*['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\",\n                next : \"start\"\n            },\n            {\n                token : \"constant.other\",\n                regex : /[^\\\\\\/]+/,\n                next : \"start\"\n            }\n        ]\n    };\n\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n    this.normalizeRules();\n};\n\noop.inherits(c_cppHighlightRules, TextHighlightRules);\n\nexports.c_cppHighlightRules = c_cppHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/c_cpp\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/c_cpp_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar c_cppHighlightRules = acequire(\"./c_cpp_highlight_rules\").c_cppHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Range = acequire(\"../range\").Range;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = c_cppHighlightRules;\n\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        } else if (state == \"doc-start\") {\n            if (endState == \"start\") {\n                return \"\";\n            }\n            var match = line.match(/^\\s*(\\/?)\\*/);\n            if (match) {\n                if (match[1]) {\n                    indent += \" \";\n                }\n                indent += \"* \";\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/c_cpp\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}